# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'compulsory_choose.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import os
from config import UI_CONFIG
from extract_courses import get_compulsory_courses
from course_rating import course_rating_manager
from teacher_recommendation import TeacherRecommender


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(800, 800)
        
        # 应用统一样式
        Dialog.setStyleSheet(UI_CONFIG['component_styles']['dialog'])
        
        self.gridLayout = QtWidgets.QGridLayout(Dialog)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        
        # 确认按钮
        self.confirm = QtWidgets.QPushButton(self.frame)
        self.confirm.setGeometry(QtCore.QRect(600, 620, 120, 35))
        self.confirm.setObjectName("confirm")
        self.confirm.setStyleSheet(UI_CONFIG['component_styles']['button'])
        
        # 课程列表表格 - 调整位置和大小
        self.list = QtWidgets.QTableWidget(self.frame)
        self.list.setGeometry(QtCore.QRect(30, 150, 350, 450))
        self.list.setObjectName("list")
        self.list.setColumnCount(3)  # 增加一列显示年级信息
        self.list.setStyleSheet(UI_CONFIG['component_styles']['table'])
        
        # 设置表头
        header_items = ["课程名称", "学分", "学期"]
        for i, header in enumerate(header_items):
            item = QtWidgets.QTableWidgetItem()
            item.setText(header)
            self.list.setHorizontalHeaderItem(i, item)
        
        # 设置列宽
        self.list.setColumnWidth(0, 180)  # 课程名称列
        self.list.setColumnWidth(1, 60)   # 学分列
        self.list.setColumnWidth(2, 80)   # 学期列
        
        # 学分显示
        self.all_points = QtWidgets.QLCDNumber(self.frame)
        self.all_points.setGeometry(QtCore.QRect(380, 620, 141, 51))
        self.all_points.setObjectName("all_points")
        self.all_points.setStyleSheet(UI_CONFIG['component_styles']['credits_display']['lcd'])
        self.all_points.setDigitCount(4)  # 设置显示位数
        self.all_points.setSegmentStyle(QtWidgets.QLCDNumber.Flat)  # 设置显示风格
        
        # 返回按钮
        self.return_2 = QtWidgets.QPushButton(self.frame)
        self.return_2.setGeometry(QtCore.QRect(30, 620, 120, 35))
        self.return_2.setObjectName("return_2")
        self.return_2.setStyleSheet(UI_CONFIG['component_styles']['button'])
        
        # 背景按钮（用于显示学分）
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setGeometry(QtCore.QRect(280, 620, 241, 51))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.setStyleSheet(UI_CONFIG['component_styles']['credits_display']['background'])
        
        # 背景图片
        self.background = QtWidgets.QLabel(self.frame)
        self.background.setGeometry(QtCore.QRect(-360, -40, 1928, 2503))
        self.background.setObjectName("background")
        
        # 学分标签
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(290, 630, 78, 23))
        self.label.setObjectName("label")
        self.label.setStyleSheet(UI_CONFIG['component_styles']['credits_display']['label'])
        
        # 标题按钮
        self.pushButton_5 = QtWidgets.QPushButton(self.frame)
        self.pushButton_5.setGeometry(QtCore.QRect(250, 50, 300, 80))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.setStyleSheet("""
            QPushButton {
                background-color: #ffffff;
                border: 3px solid #000000;
                border-radius: 20px;
                padding: 15px 25px;
                font-family: '楷体';
                font-size: 32px;
                font-weight: bold;
                color: #333333;
            }
            QPushButton:hover {
                background-color: #f8f8f8;
                border-color: #2196F3;
            }
        """)
        
        # 创建复选框布局 - 调整位置避免重叠
        self.layoutWidget = QtWidgets.QWidget(self.frame)
        self.layoutWidget.setGeometry(QtCore.QRect(400, 150, 280, 450))
        self.layoutWidget.setObjectName("layoutWidget")
        
        # 创建滚动区域以支持更多复选框
        self.scrollArea = QtWidgets.QScrollArea(self.layoutWidget)
        self.scrollArea.setGeometry(QtCore.QRect(0, 0, 280, 450))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setStyleSheet("""
            QScrollArea {
                border: 2px solid #000000;
                border-radius: 10px;
                background-color: #ffffff;
            }
        """)
        
        self.scrollWidget = QtWidgets.QWidget()
        self.scrollArea.setWidget(self.scrollWidget)
        
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollWidget)
        self.verticalLayout.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout.setSpacing(8)
        self.verticalLayout.setObjectName("verticalLayout")
        
        # 复选框将在加载课程数据时动态创建
        self.checkboxes = []
        
        # 添加教师推荐区域
        self.recommendation_group = QtWidgets.QGroupBox(self.frame)
        self.recommendation_group.setGeometry(QtCore.QRect(30, 150, 720, 500))
        self.recommendation_group.setStyleSheet("""
            QGroupBox {
                background-color: #ffffff;
                border: 2px solid #000000;
                border-radius: 10px;
                margin-top: 10px;
                font-family: '楷体';
                font-size: 14px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }
        """)
        self.recommendation_group.setTitle("教师推荐")
        self.recommendation_group.hide()  # 初始时隐藏
        
        # 教师推荐列表
        self.recommendation_list = QtWidgets.QTableWidget(self.recommendation_group)
        self.recommendation_list.setGeometry(QtCore.QRect(10, 30, 700, 430))
        self.recommendation_list.setStyleSheet(UI_CONFIG['component_styles']['table'])
        self.recommendation_list.setColumnCount(7)
        self.recommendation_list.setHorizontalHeaderLabels([
            "课程名称", "任课教师", "综合评分", "评价人数", 
            "教学评分", "给分评分", "推荐评分"
        ])
        
        # 返回选课按钮
        self.back_to_selection = QtWidgets.QPushButton(self.recommendation_group)
        self.back_to_selection.setGeometry(QtCore.QRect(10, 465, 120, 35))
        self.back_to_selection.setText("返回选课")
        self.back_to_selection.setStyleSheet(UI_CONFIG['component_styles']['button'])
        self.back_to_selection.clicked.connect(self.show_course_selection)
        
        # 进入选择性必修课按钮
        self.next_to_elective = QtWidgets.QPushButton(self.recommendation_group)
        self.next_to_elective.setGeometry(QtCore.QRect(580, 465, 130, 35))
        self.next_to_elective.setText("选择性必修课")
        self.next_to_elective.setStyleSheet(UI_CONFIG['component_styles']['button'])
        self.next_to_elective.clicked.connect(self.go_to_elective_courses)
        
        # 设置z-order
        self.background.raise_()
        self.layoutWidget.raise_()
        self.pushButton_4.raise_()
        self.confirm.raise_()
        self.list.raise_()
        self.all_points.raise_()
        self.return_2.raise_()
        self.label.raise_()
        self.pushButton_5.raise_()
        self.recommendation_group.raise_()  # 确保推荐界面在最上层
        
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "必修课选择"))
        self.confirm.setText(_translate("Dialog", "确认"))
        self.return_2.setText(_translate("Dialog", "返回"))
        self.label.setText(_translate("Dialog", "已选学分"))
        self.pushButton_5.setText(_translate("Dialog", "必修课选择"))

class CompulsoryChooseUi(QtWidgets.QDialog, Ui_Dialog):
    def __init__(self, grade=None, major=None, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        # 兼容"大一""大二"或"二下"格式
        if grade in ["大一", "大二", "大三", "大四"]:
            grade_prefix = grade[1]  # "一""二""三""四"
            self.grade = f"{grade_prefix}下"
        else:
            self.grade = grade or "二下"
        self.major = major or "通班"
        self.selected_courses = []
        self.all_courses = []  # 存储所有课程
        self.current_grade_courses = []  # 存储当前年级的课程
        self.checkboxes = []
        self.teacher_recommender = TeacherRecommender()
        
        # 设置背景图片
        try:
            base_dir = os.path.dirname(os.path.abspath(__file__))
            background_path = os.path.join(base_dir, "res", "背景.png")
            if os.path.exists(background_path):
                self.background.setPixmap(QtGui.QPixmap(background_path))
        except Exception as e:
            print(f"加载背景图片失败: {e}")
        
        # 连接信号
        self.confirm.clicked.connect(self.confirm_selection)
        self.return_2.clicked.connect(self.reject)
        
        # 加载课程数据
        self.load_all_courses()
    
    def load_all_courses(self):
        """加载所有课程数据，显示全部但自动勾选当前年级的课程"""
        try:
            base_dir = os.path.dirname(os.path.abspath(__file__))
            res_dir = os.path.join(base_dir, "res")
            
            # 直接从通班专业课表格读取所有课程
            compulsory_file = os.path.join(res_dir, "通班&智能专业课 表格.xlsx")
            if os.path.exists(compulsory_file):
                df = pd.read_excel(compulsory_file)
                df.columns = df.columns.str.replace('\u200b', '').str.strip()
                
                print(f"通班文件列名: {df.columns.tolist()}")
                print(f"数据行数: {len(df)}")
                
                # 年级映射 - 包含上下半学期和跨学期的课程
                grade_mapping = {
                    "一上": ["一上", "一上/下"],
                    "一下": ["一下", "一上/下", "一/下"],
                    "二上": ["二上", "二上/下"],
                    "二下": ["二下", "二上/下", "二/下"],
                    "三上": ["三上", "三上/下"],
                    "三下": ["三下", "三上/下", "三/下"],
                    "四上": ["四上", "四上/下"],
                    "四下": ["四下", "四上/下", "四/下"]
                }
                
                # 获取当前年级对应的学期
                current_semesters = grade_mapping.get(self.grade, [self.grade])
                print(f"当前年级: {self.grade}, 对应学期: {current_semesters}")
                
                # 获取所有课程
                self.all_courses = []
                for _, row in df.iterrows():
                    course_name = str(row.get('课程名称', '')).strip()
                    if course_name in ['微电子与电路基础', '人工智能与社会科学']:
                        continue
                    if course_name and course_name != 'nan':
                        course_semester = str(row.get('选课时间', '')).strip()
                        course_credit = row.get('学分', 2)
                        
                        # 判断是否为当前年级的课程
                        is_current_grade = False
                        if current_semesters:
                            current_grade_prefix = self.grade[0]  # 获取年级前缀（如"二"）
                            current_semester = "下" if self.grade.endswith("下") else "上"
                            
                            # 检查课程学期是否与当前年级匹配
                            if course_semester:  # 确保课程学期不为空
                                # 检查各种可能的格式
                                patterns = [
                                    self.grade,  # 完全匹配（如"二下"）
                                    f"{current_grade_prefix}上/下",  # 跨学期匹配（如"二上/下"）
                                    f"{current_grade_prefix}/下",  # 简写下学期（如"二/下"）
                                    f"{current_grade_prefix}{current_semester}/下"  # 扩展格式
                                ]
                                
                                # 检查是否匹配任何模式
                                is_current_grade = (
                                    any(pattern in course_semester for pattern in patterns) or
                                    course_semester in current_semesters
                                )
                                
                                print(f"课程: {course_name}, 学期: {course_semester}, 当前年级: {self.grade}, 是否当前年级: {is_current_grade}")
                        
                        # 为课程分配示例时间和地点信息
                        import random
                        days = ['周一', '周二', '周三', '周四', '周五']
                        periods = ['1-2节', '3-4节', '5-6节', '7-8节']
                        locations = ['教学楼A101', '教学楼A102', '教学楼B201', '教学楼B202', '实验楼C301']
                        teachers = ['张教授', '李教授', '王教授', '赵教授', '陈教授', '刘教授']
                        
                        # 生成随机但固定的时间（基于课程名称哈希）
                        course_hash = hash(course_name) % 1000
                        day = days[course_hash % len(days)]
                        period = periods[course_hash % len(periods)]
                        location = locations[course_hash % len(locations)]
                        teacher = teachers[course_hash % len(teachers)]
                        
                        self.all_courses.append({
                            'name': course_name,
                            'credit': course_credit,
                            'grade': course_semester,
                            'time': f'{day}{period}',
                            'location': location,
                            'teacher': teacher,
                            'is_current_grade': is_current_grade
                        })
                
                print(f"加载了 {len(self.all_courses)} 门课程")
                print(f"当前年级课程数: {sum(1 for c in self.all_courses if c['is_current_grade'])}")
                
            else:
                print(f"通班文件不存在: {compulsory_file}")
                # 提供示例数据
                self.all_courses = [
                    {'name': '计算概论A', 'credit': 3, 'grade': '一上', 'is_current_grade': self.grade in ['一上', '一下']},
                    {'name': '线性代数A I', 'credit': 4, 'grade': '一上', 'is_current_grade': self.grade in ['一上', '一下']},
                    {'name': '高等数学A I', 'credit': 5, 'grade': '一上', 'is_current_grade': self.grade in ['一上', '一下']},
                    {'name': '数据结构与算法(A)', 'credit': 3, 'grade': '二上', 'is_current_grade': self.grade in ['二上', '二下']},
                    {'name': '计算机系统导论', 'credit': 5, 'grade': '二上', 'is_current_grade': self.grade in ['二上', '二下']},
                ]
            
            # 更新界面
            self.update_course_display()
            
        except Exception as e:
            print(f"加载课程数据失败: {e}")
            import traceback
            traceback.print_exc()
            # 提供示例数据
            self.all_courses = [
                {'name': '计算概论A', 'credit': 3, 'grade': '一上', 'is_current_grade': self.grade in ['一上', '一下']},
                {'name': '线性代数A I', 'credit': 4, 'grade': '一上', 'is_current_grade': self.grade in ['一上', '一下']},
                {'name': '高等数学A I', 'credit': 5, 'grade': '一上', 'is_current_grade': self.grade in ['一上', '一下']},
                {'name': '数据结构与算法(A)', 'credit': 3, 'grade': '二上', 'is_current_grade': self.grade in ['二上', '二下']},
                {'name': '计算机系统导论', 'credit': 5, 'grade': '二上', 'is_current_grade': self.grade in ['二上', '二下']},
            ]
            self.update_course_display()
    
    def update_course_display(self):
        """更新课程显示"""
        if not self.all_courses:
            return
        
        # 清空现有的复选框
        for checkbox in self.checkboxes:
            checkbox.deleteLater()
        self.checkboxes.clear()
        
        # 过滤出所有下学期的课程（包括跨学期的课程）
        all_second_semester_courses = []
        for course in self.all_courses:
            course_semester = course['grade']
            if (any(semester in course_semester for semester in ["一下", "二下", "三下", "四下"]) or
                any(f"{semester}/下" in course_semester for semester in ["一", "二", "三", "四"])):
                all_second_semester_courses.append(course)
                print(f"显示课程: {course['name']}, 学期: {course_semester}, 是否当前年级: {course['is_current_grade']}")
        
        # 更新表格
        self.list.setRowCount(len(all_second_semester_courses))
        
        # 添加课程到表格和复选框
        from main_enhanced import user_data
        selected_names = set()
        for c in user_data.get("compulsory_courses", []):
            # 兼容不同key
            if "name" in c:
                selected_names.add(c["name"])
            elif "课程名称" in c:
                selected_names.add(c["课程名称"])
        for i, course in enumerate(all_second_semester_courses):
            try:
                # 表格项
                name_item = QtWidgets.QTableWidgetItem(course['name'])
                credit_item = QtWidgets.QTableWidgetItem(str(course['credit']))
                grade_item = QtWidgets.QTableWidgetItem(course['grade'])
                # 如果是当前年级的课程，高亮显示
                if course['is_current_grade']:
                    name_item.setBackground(QtGui.QColor(173, 216, 230))  # 淡蓝色
                    credit_item.setBackground(QtGui.QColor(173, 216, 230))
                    grade_item.setBackground(QtGui.QColor(173, 216, 230))
                self.list.setItem(i, 0, name_item)
                self.list.setItem(i, 1, credit_item)
                self.list.setItem(i, 2, grade_item)
                # 创建对应的复选框
                checkbox = QtWidgets.QCheckBox(self.scrollWidget)
                checkbox.setText(f"{course['name']} ({course['credit']}分)")
                checkbox.setStyleSheet(UI_CONFIG['component_styles']['checkbox'])
                # 优先根据user_data恢复勾选
                if course['name'] in selected_names:
                    checkbox.setChecked(True)
                    checkbox.setStyleSheet(UI_CONFIG['component_styles']['checkbox'] + """
                        QCheckBox {
                            font-weight: bold;
                            color: #2196F3;
                            background-color: #E3F2FD;
                            padding: 2px;
                            border-radius: 4px;
                        }
                    """)
                elif course['is_current_grade']:
                    print(f"自动勾选课程: {course['name']}")
                    checkbox.setChecked(True)
                    checkbox.setStyleSheet(UI_CONFIG['component_styles']['checkbox'] + """
                        QCheckBox {
                            font-weight: bold;
                            color: #2196F3;
                            background-color: #E3F2FD;
                            padding: 2px;
                            border-radius: 4px;
                        }
                    """)
                else:
                    checkbox.setChecked(False)
                    checkbox.setStyleSheet(UI_CONFIG['component_styles']['checkbox'])
                checkbox.stateChanged.connect(self.update_credits)
                self.checkboxes.append(checkbox)
                self.verticalLayout.addWidget(checkbox)
            except Exception as e:
                print(f"添加课程到界面失败: {course['name']} - {e}")
                continue
        
        # 调整表格列宽
        self.list.resizeColumnsToContents()
        
        # 更新学分显示
        self.update_credits()
    
    def update_credits(self):
        """更新学分显示"""
        total_credits = 0
        selected_count = 0
        
        # 获取所有下学期课程
        all_second_semester_courses = []
        for course in self.all_courses:
            course_semester = course['grade']
            if (any(semester in course_semester for semester in ["一下", "二下", "三下", "四下"]) or
                any(f"{semester}/下" in course_semester for semester in ["一", "二", "三", "四"])):
                all_second_semester_courses.append(course)
        
        # 确保复选框和课程列表长度匹配
        if len(self.checkboxes) != len(all_second_semester_courses):
            print(f"警告：复选框数量 ({len(self.checkboxes)}) 与课程数量 ({len(all_second_semester_courses)}) 不匹配")
            return
        
        # 计算已选课程的总学分
        for i, checkbox in enumerate(self.checkboxes):
            if checkbox.isChecked():
                try:
                    total_credits += all_second_semester_courses[i]['credit']
                    selected_count += 1
                except (IndexError, KeyError) as e:
                    print(f"错误：获取课程学分失败 - {e}")
                    continue
        
        # 更新显示
        self.all_points.display(total_credits)
        self.label.setText(f"已选学分 ({selected_count}门)")
    
    def show_teacher_recommendations(self):
        """显示教师推荐"""
        # 隐藏选课界面
        self.list.hide()
        self.layoutWidget.hide()
        self.pushButton_5.hide()  # 隐藏标题
        
        # 确保推荐界面在最上层并显示
        self.recommendation_group.raise_()
        self.recommendation_group.show()
        
        # 获取选中的课程
        selected_courses = self.get_selected_courses()
        course_names = [course['课程名称'] for course in selected_courses]
        
        # 清空并设置表格行数
        self.recommendation_list.setRowCount(0)
        self.recommendation_list.setRowCount(len(course_names))
        
        # 填充推荐信息
        for row, course_name in enumerate(course_names):
            # 设置课程名称
            self.recommendation_list.setItem(
                row, 0, 
                QtWidgets.QTableWidgetItem(course_name)
            )
            
            # 获取教师推荐信息
            recommendations = self.teacher_recommender.get_teacher_recommendations(course_name)
            
            if recommendations:
                # 有推荐数据
                best_teacher = recommendations[0]  # 第一个是评分最高的教师
                
                # 设置各列数据
                columns_data = [
                    ('教师姓名', 1),
                    ('综合得分', 2),
                    ('评分人数', 3),
                    ('教学', 4),
                    ('给分', 5),
                    ('推荐', 6)
                ]
                
                for key, col in columns_data:
                    value = best_teacher[key]
                    item = QtWidgets.QTableWidgetItem(
                        f"{value:.1f}" if isinstance(value, float) else str(value)
                    )
                    item.setTextAlignment(QtCore.Qt.AlignCenter)
                    self.recommendation_list.setItem(row, col, item)
                    
                    # 根据评分设置颜色
                    if col in [2, 4, 5, 6]:  # 评分列
                        try:
                            score = float(item.text())
                            if score >= 8.5:
                                item.setBackground(QtGui.QColor('#E8F5E9'))  # 浅绿色
                            elif score >= 7.5:
                                item.setBackground(QtGui.QColor('#FFF3E0'))  # 浅橙色
                            else:
                                item.setBackground(QtGui.QColor('#FFEBEE'))  # 浅红色
                        except ValueError:
                            pass
                
                # 设置工具提示显示所有教师信息
                tooltip = "所有任课教师信息：\n\n"
                for teacher in recommendations:
                    tooltip += (
                        f"教师：{teacher['教师姓名']}\n"
                        f"综合得分：{teacher['综合得分']:.1f}\n"
                        f"教学评分：{teacher['教学']:.1f}\n"
                        f"给分评分：{teacher['给分']:.1f}\n"
                        f"推荐评分：{teacher['推荐']:.1f}\n"
                        f"评价人数：{teacher['评分人数']}\n"
                    )
                    if teacher['备注']:
                        tooltip += f"备注：{teacher['备注']}\n"
                    tooltip += "\n"
                
                for col in range(7):
                    item = self.recommendation_list.item(row, col)
                    if item:
                        item.setToolTip(tooltip)
            else:
                # 无推荐数据
                message = "暂无教师评分数据"
                for col in range(1, 7):
                    item = QtWidgets.QTableWidgetItem(message if col == 1 else '-')
                    item.setTextAlignment(QtCore.Qt.AlignCenter)
                    self.recommendation_list.setItem(row, col, item)
        
        # 调整列宽
        self.recommendation_list.resizeColumnsToContents()
        
        # 显示"下一步"按钮
        self.next_to_elective.show()

    def show_course_selection(self):
        """返回课程选择界面"""
        self.recommendation_group.hide()
        self.list.show()
        self.layoutWidget.show()
        self.pushButton_5.show()  # 显示标题

    def confirm_selection(self):
        """确认选课并显示教师推荐"""
        selected_courses = self.get_selected_courses()
        if not selected_courses:
            QtWidgets.QMessageBox.warning(
                self,
                "提示",
                "请至少选择一门课程！"
            )
            return
        
        # 显示教师推荐
        self.show_teacher_recommendations()
        
        # 添加一个确认按钮点击事件，用于跳转到选择性必修课
        self.next_to_elective.clicked.connect(self.go_to_elective_courses)
    
    def get_selected_courses(self):
        """获取选中的课程"""
        selected_courses = []
        all_second_semester_courses = [course for course in self.all_courses 
                                    if any(semester in course['grade'] for semester in ["一下", "二下", "三下", "四下"]) or
                                    any(f"{semester}/下" in course['grade'] for semester in ["一", "二", "三", "四"])]
        
        for i, checkbox in enumerate(self.checkboxes):
            if checkbox.isChecked():
                course = all_second_semester_courses[i]
                selected_courses.append({
                    '课程名称': course['name'],
                    '学分': course['credit'],
                    '上课时间': course.get('time', ''),
                    '上课地点': course.get('location', ''),
                    '教师': course.get('teacher', ''),
                    '推荐年级': course['grade']
                })
        return selected_courses
    
    def go_to_elective_courses(self):
        """跳转到选择性必修课界面"""
        try:
            # 获取选中的必修课程
            selected_compulsory = self.get_selected_courses()
            
            if not selected_compulsory:
                QtWidgets.QMessageBox.warning(self, "提示", "请至少选择一门必修课程！")
                return
            
            # 保存必修课数据到全局user_data
            try:
                from main_enhanced import user_data
                
                # 格式化必修课数据
                formatted_compulsory = []
                for course in selected_compulsory:
                    formatted_compulsory.append({
                        'name': course.get('课程名称', ''),
                        'credit': float(course.get('学分', 0)),
                        'time': course.get('上课时间', ''),
                        'location': course.get('上课地点', ''),
                        'teacher': course.get('教师', '')
                    })
                
                # 保存到全局数据
                user_data["compulsory_courses"] = formatted_compulsory
                
                # 初始化总学分为必修课学分
                compulsory_credits = sum(course['credit'] for course in formatted_compulsory)
                user_data["total_credits"] = compulsory_credits
                
                print(f"必修课保存成功: {len(formatted_compulsory)}门课程")
                print(f"必修课学分初始化: {compulsory_credits}")
                
            except Exception as e:
                print(f"保存必修课数据失败: {e}")
            
            # 设置结果代码，表示需要跳转到选择性必修课
            self.done(QtWidgets.QDialog.Accepted + 1)  # 使用特殊的结果代码
            
        except Exception as e:
            print(f"跳转到选择性必修课失败: {e}")
            QtWidgets.QMessageBox.warning(
                self,
                "错误",
                f"无法跳转到选择性必修课界面：{str(e)}"
            )


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = CompulsoryChooseUi(grade="二上", major="通班")
    Dialog.show()
    sys.exit(app.exec_())
